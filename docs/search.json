[
  {
    "objectID": "posts/markdown.html",
    "href": "posts/markdown.html",
    "title": "An Example Markdown Post",
    "section": "",
    "text": "Footnotes\n\n\nThis is the footnote.↩︎"
  },
  {
    "objectID": "posts/inkcheck.html#installation",
    "href": "posts/inkcheck.html#installation",
    "title": "Introducing fastlinkcheck",
    "section": "Installation",
    "text": "Installation\nYou can install fastlinkcheck with pip:\npip install fastlinkcheck"
  },
  {
    "objectID": "posts/inkcheck.html#usage",
    "href": "posts/inkcheck.html#usage",
    "title": "Introducing fastlinkcheck",
    "section": "Usage",
    "text": "Usage\nAfter installing fastlinkcheck, the cli command link_check is available from the command line. We can see various options with the --help flag.\n\nlink_check --help\n\nusage: link_check [-h] [--host HOST] [--config_file CONFIG_FILE] [--pdb]\n                  [--xtra XTRA]\n                  path\n\nCheck for broken links recursively in `path`.\n\npositional arguments:\n  path                  Root directory searched recursively for HTML files\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --host HOST           Host and path (without protocol) of web server\n  --config_file CONFIG_FILE\n                        Location of file with urls to ignore\n  --pdb                 Run in pdb debugger (default: False)\n  --xtra XTRA           Parse for additional args (default: '')\n\n\nFrom the root of fastlinkcheck repo, We can search the directory _example/broken_links recursively for broken links like this:\n\nlink_check _example/broken_links \n\n                                                 \nERROR: The Following Broken Links or Paths were found:\n\n- 'http://fastlinkcheck.com/test.html' was found in the following pages:\n  - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html`\n\n- 'http://somecdn.com/doesntexist.html' was found in the following pages:\n  - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html`\n\n- Path('/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.js') was found in the following pages:\n  - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html`\n\n\n: 1\n\n\nSpecifying the --host parameter allows you detect links that are internal by identifying links with that host name. External links are verified by making a request to the appropriate website. On the other hand, internal links are verified by inspecting the presence and content of local files.\nWe must be careful when using the --host argument to only pass the host (and path, if necessary) without the protocol. For example, this is how we specify the hostname if your site’s url is http://fastlinkcheck.com/test.html:\n\nlink_check _example/broken_links --host fastlinkcheck.com\n\n                                                 \nERROR: The Following Broken Links or Paths were found:\n\n- 'http://somecdn.com/doesntexist.html' was found in the following pages:\n  - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html`\n\n- Path('/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.js') was found in the following pages:\n  - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html`\n\n\n: 1\n\n\nWe now have one less broken link as there is indeed a file named test.html in the root of the path we are searching. However, if we add a path to the end of --host , such as fastlinkcheck.com/mysite the link would again be listed as broken because _example/broken_links/mysite/test.html does not exist:\n\nlink_check _example/broken_links --host fastlinkcheck.com/mysite\n\n                                                 \nERROR: The Following Broken Links or Paths were found:\n\n- 'http://fastlinkcheck.com/test.html' was found in the following pages:\n  - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html`\n\n- 'http://somecdn.com/doesntexist.html' was found in the following pages:\n  - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html`\n\n- Path('/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.js') was found in the following pages:\n  - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html`\n\n\n: 1\n\n\nYou can ignore links by creating a text file that contains a list of urls and paths to ignore. For example, the file _example/broken_links/linkcheck.rc contains:\n\ncat _example/broken_links/linkcheck.rc\n\ntest.js\nhttps://www.google.com\n\n\nWe can use this file to ignore urls and paths with the --config_file argument. This will filter out references to the broken link /test.js from our earlier results:\n\nlink_check _example/broken_links --host fastlinkcheck.com --config_file _example/broken_links/linkcheck.rc\n\n                                                 \nERROR: The Following Broken Links or Paths were found:\n\n- 'http://somecdn.com/doesntexist.html' was found in the following pages:\n  - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html`\n\n\n: 1\n\n\nFinally, if there are no broken links, link_check will not return anything. The directory _example/no_broken_links/ does not contain any HTML files with broken links:\n\nlink_check _example/no_broken_links\n\nNo broken links found!"
  },
  {
    "objectID": "posts/inkcheck.html#python",
    "href": "posts/inkcheck.html#python",
    "title": "Introducing fastlinkcheck",
    "section": "Python",
    "text": "Python\nYou can also use these utilities from python instead of the terminal. Please see these docs for more information."
  },
  {
    "objectID": "posts/inkcheck.html#using-link_check-in-github-actions",
    "href": "posts/inkcheck.html#using-link_check-in-github-actions",
    "title": "Introducing fastlinkcheck",
    "section": "Using link_check in GitHub Actions",
    "text": "Using link_check in GitHub Actions\nThe link_check CLI utility that is installed with fastlinkcheck can be very useful in continuous integration systems like GitHub Actions. Here is an example GitHub Actions workflow that uses link_check:\nname: Check Links\non: [workflow_dispatch, push]\n\njobs:\n  check-links:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - uses: actions/setup-python@v2\n    - name: check for broken links\n      run: |\n        pip install fastlinkcheck\n        link_check _example \nWe can a few more lines of code to open an issue instead when a broken link is found, using the gh cli:\n...\n    - name: check for broken links\n      run: |\n        pip install fastlinkcheck\n        link_check _example 2> err || true\n        export GITHUB_TOKEN=\"YOUR_TOKEN\"\n        [[ -s err ]] &&  gh issue create -t \"Broken links found\" -b \"$(< err)\" -R \"yourusername/yourrepo\"\nWe can extend this even further to only open an issue when another issue with a specific label isn’t already open:\n...\n    - name: check for broken links\n      run: |\n       pip install fastlinkcheck\n       link_check \"docs/_site\" --host \"docs.fast.ai\" 2> err || true\n        export GITHUB_TOKEN=\"YOUR_TOKEN\"\n        if [[ -z $(gh issue list -l \"broken-link\")) && (-s err) ]]; then\n          gh issue create -t \"Broken links found\" -b \"$(< err)\" -l \"broken-link\" -R \"yourusername/yourrepo\"\n        fi\nSee the GitHub Actions docs for more information."
  },
  {
    "objectID": "posts/intro.html",
    "href": "posts/intro.html",
    "title": "Introducing nbpages",
    "section": "",
    "text": "We are very pleased to announce the immediate availability of fastpages. fastpages is a platform which allows you to create and host a blog for free, with no ads and many useful features, such as:\nfastpages relies on Github pages for hosting, and Github Actions to automate the creation of your blog. The setup takes around three minutes, and does not require any technical knowledge or expertise. Due to built-in automation of fastpages, you don’t have to fuss with conversion scripts. All you have to do is save your Jupyter notebook, Word document or markdown file into a specified directory and the rest happens automatically. Infact, this blog post is written in a Jupyter notebook, which you can see with the “View on GitHub” link above.\nfast.ai have previously released a similar project called fast_template, which is even easier to set up, but does not support automatic creation of posts from Microsoft Word or Jupyter notebooks, including many of the features outlined above.\nBecause fastpages is more flexible and extensible, we recommend using it where possible. fast_template may be a better option for getting folks blogging who have no technical expertise at all, and will only be creating posts using Github’s integrated online editor."
  },
  {
    "objectID": "posts/intro.html#setting-up-fastpages",
    "href": "posts/intro.html#setting-up-fastpages",
    "title": "Introducing nbpages",
    "section": "Setting Up Fastpages",
    "text": "Setting Up Fastpages\nThe setup process of fastpages is automated with GitHub Actions, too! Upon creating a repo from the fastpages template, a pull request will automatically be opened (after ~ 30 seconds) configuring your blog so it can start working. The automated pull request will greet you with instructions like this:\n\n\n\nImgur\n\n\nAll you have to do is follow these instructions (in the PR you receive) and your new blogging site will be up and running!"
  },
  {
    "objectID": "posts/intro.html#jupyter-notebooks-fastpages",
    "href": "posts/intro.html#jupyter-notebooks-fastpages",
    "title": "Introducing nbpages",
    "section": "Jupyter Notebooks & Fastpages",
    "text": "Jupyter Notebooks & Fastpages\nIn this post, we will cover special features that fastpages provides for Jupyter notebooks. You can also write your blog posts with Word documents or markdown in fastpages, which contain many, but not all the same features.\n\nOptions via FrontMatter\nThe first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this:\n# Title\n> Awesome summary\n\n- toc: true\n- branch: master\n- badges: true\n- comments: true\n- author: Hamel Husain & Jeremy Howard\n- categories: [fastpages, jupyter]\nAll of the above settings are enabled in this post, so you can see what they look like!\n\nthe summary field (preceeded by >) will be displayed under your title, and will also be used by social media to display as the description of your page.\ntoc: setting this to true will automatically generate a table of contents\nbadges: setting this to true will display Google Colab and GitHub links on your blog post.\ncomments: setting this to true will enable comments. See these instructions for more details.\nauthor this will display the authors names.\ncategories will allow your post to be categorized on a “Tags” page, where readers can browse your post by categories.\n\nMarkdown front matter is formatted similarly to notebooks. The differences between the two can be viewed on the fastpages README.\n\n\nCode Folding\nput a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it:\n\n#hide\n!pip install pandas altair\n\n\n#collapse-hide\nimport pandas as pd\nimport altair as alt\n\nput a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it:\n\n#collapse-show\ncars = 'https://vega.github.io/vega-datasets/data/cars.json'\nmovies = 'https://vega.github.io/vega-datasets/data/movies.json'\nsp500 = 'https://vega.github.io/vega-datasets/data/sp500.csv'\nstocks = 'https://vega.github.io/vega-datasets/data/stocks.csv'\nflights = 'https://vega.github.io/vega-datasets/data/flights-5k.json'\n\nIf you want to completely hide cells (not just collapse them), read these instructions.\n\n# hide\ndf = pd.read_json(movies) # load movies data\ndf.columns = [x.replace(' ', '_') for x in df.columns.values]\ngenres = df['Major_Genre'].unique() # get unique field values\ngenres = list(filter(lambda d: d is not None, genres)) # filter out None values\ngenres.sort() # sort alphabetically\n\n\n\nInteractive Charts With Altair\nInteractive visualizations made with Altair remain interactive!\nWe leave this below cell unhidden so you can enjoy a preview of syntax highlighting in fastpages, which uses the Dracula theme.\n\n# select a point for which to provide details-on-demand\nlabel = alt.selection_single(\n    encodings=['x'], # limit selection to x-axis value\n    on='mouseover',  # select on mouseover events\n    nearest=True,    # select data point nearest the cursor\n    empty='none'     # empty selection includes no data points\n)\n\n# define our base line chart of stock prices\nbase = alt.Chart().mark_line().encode(\n    alt.X('date:T'),\n    alt.Y('price:Q', scale=alt.Scale(type='log')),\n    alt.Color('symbol:N')\n)\n\nalt.layer(\n    base, # base line chart\n    \n    # add a rule mark to serve as a guide line\n    alt.Chart().mark_rule(color='#aaa').encode(\n        x='date:T'\n    ).transform_filter(label),\n    \n    # add circle marks for selected time points, hide unselected points\n    base.mark_circle().encode(\n        opacity=alt.condition(label, alt.value(1), alt.value(0))\n    ).add_selection(label),\n\n    # add white stroked text to provide a legible background for labels\n    base.mark_text(align='left', dx=5, dy=-5, stroke='white', strokeWidth=2).encode(\n        text='price:Q'\n    ).transform_filter(label),\n\n    # add text labels for stock prices\n    base.mark_text(align='left', dx=5, dy=-5).encode(\n        text='price:Q'\n    ).transform_filter(label),\n    \n    data=stocks\n).properties(\n    width=500,\n    height=400\n)\n\n\n\n\n\n\n\n\nData Tables\nYou can display tables per the usual way in your blog:\n\n# display table with pandas\ndf[['Title', 'Worldwide_Gross', \n    'Production_Budget', 'IMDB_Rating']].head()\n\n\n\n\n\n  \n    \n      \n      Title\n      Worldwide_Gross\n      Production_Budget\n      IMDB_Rating\n    \n  \n  \n    \n      0\n      The Land Girls\n      146083.0\n      8000000.0\n      6.1\n    \n    \n      1\n      First Love, Last Rites\n      10876.0\n      300000.0\n      6.9\n    \n    \n      2\n      I Married a Strange Person\n      203134.0\n      250000.0\n      6.8\n    \n    \n      3\n      Let's Talk About Sex\n      373615.0\n      300000.0\n      NaN\n    \n    \n      4\n      Slam\n      1087521.0\n      1000000.0\n      3.4"
  },
  {
    "objectID": "posts/intro.html#other-features",
    "href": "posts/intro.html#other-features",
    "title": "Introducing nbpages",
    "section": "Other Features",
    "text": "Other Features\n\nGitHub Flavored Emojis\nTyping I give this post two :+1:! will render this:\nI give this post two :+1:!\n\n\nImages w/Captions\nYou can include markdown images with captions like this:\n![](https://www.fast.ai/images/fastai_paper/show_batch.png \"Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/\")\n\nOf course, the caption is optional.\n\n\nTweetcards\nTyping > twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this:\n\ntwitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20\n\n\n\nYoutube Videos\nTyping > youtube: https://youtu.be/XfoYk_Z5AkI will render this:\n\nyoutube: https://youtu.be/XfoYk_Z5AkI\n\n\n\nBoxes / Callouts\nTyping > Warning: There will be no second warning! will render this:\n\nWarning: There will be no second warning!\n\nTyping > Important: Pay attention! It's important. will render this:\n\nImportant: Pay attention! It’s important.\n\nTyping > Tip: This is my tip. will render this:\n\nTip: This is my tip.\n\nTyping > Note: Take note of this. will render this:\n\nNote: Take note of this.\n\nTyping > Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs:\n\nNote: A doc link to an example website: fast.ai should also work fine."
  },
  {
    "objectID": "posts/intro.html#more-examples",
    "href": "posts/intro.html#more-examples",
    "title": "Introducing nbpages",
    "section": "More Examples",
    "text": "More Examples\nThis tutorial contains more examples of what you can do with notebooks."
  },
  {
    "objectID": "posts/intro.html#how-fastpages-converts-notebooks-to-blog-posts",
    "href": "posts/intro.html#how-fastpages-converts-notebooks-to-blog-posts",
    "title": "Introducing nbpages",
    "section": "How fastpages Converts Notebooks to Blog Posts",
    "text": "How fastpages Converts Notebooks to Blog Posts\nfastpages uses nbdev to power the conversion process of Jupyter Notebooks to blog posts. When you save a notebook into the /_notebooks folder of your repository, GitHub Actions applies nbdev against those notebooks automatically. The same process occurs when you save Word documents or markdown files into the _word or _posts directory, respectively.\nWe will discuss how GitHub Actions work in a follow up blog post."
  },
  {
    "objectID": "posts/intro.html#resources-next-steps",
    "href": "posts/intro.html#resources-next-steps",
    "title": "Introducing nbpages",
    "section": "Resources & Next Steps",
    "text": "Resources & Next Steps\nWe highly encourage you to start blogging with fastpages! Some resources that may be helpful:\n\nfastpages repo - this is where you can go to create your own fastpages blog!\nFastai forums - nbdev & blogging category. You can ask questions about fastpages here, as well as suggest new features.\nnbdev: this project powers the conversion of Jupyter notebooks to blog posts.\n\nIf you end up writing a blog post using fastpages, please let us know on Twitter: @jeremyphoward, @HamelHusain."
  },
  {
    "objectID": "posts/example.html",
    "href": "posts/example.html",
    "title": "Fastpages Notebook Blog Post",
    "section": "",
    "text": "This notebook is a demonstration of some of capabilities of fastpages with notebooks.\nWith fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts!\n\n\nThe first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this:\n# \"My Title\"\n> \"Awesome summary\"\n\n- toc: true\n- branch: master\n- badges: true\n- comments: true\n- author: Hamel Husain & Jeremy Howard\n- categories: [fastpages, jupyter]\n\nSetting toc: true will automatically generate a table of contents\nSetting badges: true will automatically include GitHub and Google Colab links to your notebook.\nSetting comments: true will enable commenting on your blog post, powered by utterances.\n\nThe title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README.\n\n\n\nA #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post.\nA #hide_input comment at the top of any code cell will only hide the input of that cell.\n\n#hide_input\nprint('The comment #hide_input was used to hide the code that produced this.')\n\nThe comment #hide_input was used to hide the code that produced this.\n\n\nput a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it:\n\n#collapse-hide\nimport pandas as pd\nimport altair as alt\n\nput a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it:\n\n#collapse-show\ncars = 'https://vega.github.io/vega-datasets/data/cars.json'\nmovies = 'https://vega.github.io/vega-datasets/data/movies.json'\nsp500 = 'https://vega.github.io/vega-datasets/data/sp500.csv'\nstocks = 'https://vega.github.io/vega-datasets/data/stocks.csv'\nflights = 'https://vega.github.io/vega-datasets/data/flights-5k.json'\n\nplace a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it:\n\n#collapse-output\nprint('The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.')\n\nThe comment #collapse-output was used to collapse the output of this cell by default but you can expand it.\n\n\n\n\n\nCharts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook.\n\n# hide\ndf = pd.read_json(movies) # load movies data\ndf.columns = [x.replace(' ', '_') for x in df.columns.values]\ngenres = df['Major_Genre'].unique() # get unique field values\ngenres = list(filter(lambda d: d is not None, genres)) # filter out None values\ngenres.sort() # sort alphabetically\n\n\n#hide\nmpaa = ['G', 'PG', 'PG-13', 'R', 'NC-17', 'Not Rated']\n\n\n\n\n# single-value selection over [Major_Genre, MPAA_Rating] pairs\n# use specific hard-wired values as the initial selected values\nselection = alt.selection_single(\n    name='Select',\n    fields=['Major_Genre', 'MPAA_Rating'],\n    init={'Major_Genre': 'Drama', 'MPAA_Rating': 'R'},\n    bind={'Major_Genre': alt.binding_select(options=genres), 'MPAA_Rating': alt.binding_radio(options=mpaa)}\n)\n  \n# scatter plot, modify opacity based on selection\nalt.Chart(df).mark_circle().add_selection(\n    selection\n).encode(\n    x='Rotten_Tomatoes_Rating:Q',\n    y='IMDB_Rating:Q',\n    tooltip='Title:N',\n    opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05))\n)\n\n\n\n\n\n\n\n\n\n\n\nalt.Chart(df).mark_circle().add_selection(\n    alt.selection_interval(bind='scales', encodings=['x'])\n).encode(\n    alt.X('Rotten_Tomatoes_Rating', type='quantitative'),\n    alt.Y('IMDB_Rating', type='quantitative', axis=alt.Axis(minExtent=30)),\n#     y=alt.Y('IMDB_Rating:Q', ), # use min extent to stabilize axis title placement\n    tooltip=['Title:N', 'Release_Date:N', 'IMDB_Rating:Q', 'Rotten_Tomatoes_Rating:Q']\n).properties(\n    width=500,\n    height=400\n)\n\n\n\n\n\n\n\n\n\n\n\n# select a point for which to provide details-on-demand\nlabel = alt.selection_single(\n    encodings=['x'], # limit selection to x-axis value\n    on='mouseover',  # select on mouseover events\n    nearest=True,    # select data point nearest the cursor\n    empty='none'     # empty selection includes no data points\n)\n\n# define our base line chart of stock prices\nbase = alt.Chart().mark_line().encode(\n    alt.X('date:T'),\n    alt.Y('price:Q', scale=alt.Scale(type='log')),\n    alt.Color('symbol:N')\n)\n\nalt.layer(\n    base, # base line chart\n    \n    # add a rule mark to serve as a guide line\n    alt.Chart().mark_rule(color='#aaa').encode(\n        x='date:T'\n    ).transform_filter(label),\n    \n    # add circle marks for selected time points, hide unselected points\n    base.mark_circle().encode(\n        opacity=alt.condition(label, alt.value(1), alt.value(0))\n    ).add_selection(label),\n\n    # add white stroked text to provide a legible background for labels\n    base.mark_text(align='left', dx=5, dy=-5, stroke='white', strokeWidth=2).encode(\n        text='price:Q'\n    ).transform_filter(label),\n\n    # add text labels for stock prices\n    base.mark_text(align='left', dx=5, dy=-5).encode(\n        text='price:Q'\n    ).transform_filter(label),\n    \n    data=stocks\n).properties(\n    width=500,\n    height=400\n)\n\n\n\n\n\n\n\n\n\n\nYou can display tables per the usual way in your blog:\n\n# display table with pandas\ndf[['Title', 'Worldwide_Gross', \n    'Production_Budget', 'Distributor', 'MPAA_Rating', 'IMDB_Rating', 'Rotten_Tomatoes_Rating']].head()\n\n\n\n\n\n  \n    \n      \n      Title\n      Worldwide_Gross\n      Production_Budget\n      Distributor\n      MPAA_Rating\n      IMDB_Rating\n      Rotten_Tomatoes_Rating\n    \n  \n  \n    \n      0\n      The Land Girls\n      146083.0\n      8000000.0\n      Gramercy\n      R\n      6.1\n      NaN\n    \n    \n      1\n      First Love, Last Rites\n      10876.0\n      300000.0\n      Strand\n      R\n      6.9\n      NaN\n    \n    \n      2\n      I Married a Strange Person\n      203134.0\n      250000.0\n      Lionsgate\n      None\n      6.8\n      NaN\n    \n    \n      3\n      Let's Talk About Sex\n      373615.0\n      300000.0\n      Fine Line\n      None\n      NaN\n      13.0\n    \n    \n      4\n      Slam\n      1087521.0\n      1000000.0\n      Trimark\n      R\n      3.4\n      62.0\n    \n  \n\n\n\n\n\n\n\n\n\nYou can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax:\n![](my_icons/fastai_logo.png)\n\n\n\n\nRemote images can be included with the following markdown syntax:\n![](https://github.com/hamelsmu.png)\n\n\n\n\nAnimated Gifs work, too!\n![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif)\n\n\n\n\nYou can include captions with markdown images like this:\n![](https://www.fast.ai/images/fastai_paper/show_batch.png \"Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/\")"
  },
  {
    "objectID": "posts/example.html#github-flavored-emojis",
    "href": "posts/example.html#github-flavored-emojis",
    "title": "Fastpages Notebook Blog Post",
    "section": "GitHub Flavored Emojis",
    "text": "GitHub Flavored Emojis\nTyping I give this post two :+1:! will render this:\nI give this post two :+1:!"
  },
  {
    "objectID": "posts/example.html#tweetcards",
    "href": "posts/example.html#tweetcards",
    "title": "Fastpages Notebook Blog Post",
    "section": "Tweetcards",
    "text": "Tweetcards\n\n\nAltair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 …read on for some highlights. pic.twitter.com/vWJ0ZveKbZ\n\n— Jake VanderPlas (@jakevdp) December 11, 2019"
  },
  {
    "objectID": "posts/example.html#youtube-videos",
    "href": "posts/example.html#youtube-videos",
    "title": "Fastpages Notebook Blog Post",
    "section": "Youtube Videos",
    "text": "Youtube Videos\nTyping > youtube: https://youtu.be/XfoYk_Z5AkI will render this:\n\nyoutube: https://youtu.be/XfoYk_Z5AkI"
  },
  {
    "objectID": "posts/example.html#boxes-callouts",
    "href": "posts/example.html#boxes-callouts",
    "title": "Fastpages Notebook Blog Post",
    "section": "Boxes / Callouts",
    "text": "Boxes / Callouts\nTyping > Warning: There will be no second warning! will render this:\n\nWarning: There will be no second warning!\n\nTyping > Important: Pay attention! It's important. will render this:\n\nImportant: Pay attention! It’s important.\n\nTyping > Tip: This is my tip. will render this:\n\nTip: This is my tip.\n\nTyping > Note: Take note of this. will render this:\n\nNote: Take note of this.\n\nTyping > Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs:\n\nNote: A doc link to an example website: fast.ai should also work fine."
  },
  {
    "objectID": "posts/example.html#footnotes",
    "href": "posts/example.html#footnotes",
    "title": "Fastpages Notebook Blog Post",
    "section": "Footnotes",
    "text": "Footnotes\nYou can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this:\n{% raw %}For example, here is a footnote {% fn 1 %}.\nAnd another {% fn 2 %}\n{{ 'This is the footnote.' | fndetail: 1 }}\n{{ 'This is the other footnote. You can even have a [link](www.github.com)!' | fndetail: 2 }}{% endraw %}\nFor example, here is a footnote {% fn 1 %}.\nAnd another {% fn 2 %}\n{{ ‘This is the footnote.’ | fndetail: 1 }} {{ ‘This is the other footnote. You can even have a link!’ | fndetail: 2 }}"
  },
  {
    "objectID": "posts/codespaces.html",
    "href": "posts/codespaces.html",
    "title": "nbdev + GitHub Codespaces: A New Literate Programming Environment",
    "section": "",
    "text": "Today, we are going to show you how to set up a literate programming environment, allowing you to use an IDE (VS Code) and an interactive computing environment (Jupyter), without leaving your browser, for free, in under 5 minutes. You’ll even see how VSCode and Jupyter work together automatically! But first, what is literate programming? And how did I go from skeptic to a zealot of literate programming?"
  },
  {
    "objectID": "posts/codespaces.html#introduction",
    "href": "posts/codespaces.html#introduction",
    "title": "nbdev + GitHub Codespaces: A New Literate Programming Environment",
    "section": "Introduction",
    "text": "Introduction\n\nLiterate programming is a programming paradigm introduced by Donald Knuth in which a computer program is given an explanation of its logic in a natural language, such as English, interspersed with snippets of macros and traditional source code, from which compilable source code can be generated. According to Knuth, literate programming provides higher-quality programs by forcing programmers to explicitly state the thoughts behind the program. This process makes poorly thought-out design decisions more obvious. Knuth also claims that literate programming provides a first-rate documentation system, which is not an add-on, but is grown naturally in the process of exposition of one’s thoughts during a program’s creation. 1\n\nWhen I first learned about literate programming, I was quite skeptical. For the longest time, I had wrongly equated Jupyter notebooks with literate programming. Indeed, Jupyter is a brilliant interactive computing system, which was awarded the Association of Computing Machinery (ACM) Software System Award, and is loved by many developers. However, Jupyter falls short of the literate programming paradigm for the following reasons:2\n\nIt can be difficult to compile source code from notebooks.\nIt can be difficult to diff and use version control with notebooks because they are not stored in plain text.\nIt is not clear how to automatically generate documentation from notebooks.\nIt is not clear how to properly run tests suites when writing code in notebooks.\n\nMy skepticism quickly evaporated when I began using nbdev, a project that extends notebooks to complete the literate programming ideal. I spent a month, full time, using nbdev while contributing to the python library fastcore, and can report that Donald Knuth was definitely onto something. The process of writing prose and tests alongside code forced me to deeply understand why the code does what it does, and to think deeply about its design. Furthermore, the reduced cognitive load and speed of iteration of having documentation, code, and tests in one location boosted my productivity to levels I have never before experienced as a software developer. Furthermore, I found that developing this way bolstered collaboration such that code reviews not only happened faster but were more meaningful. In short, nbdev may be the most profound productivity tool I have ever used.\nAs a teaser, look how easy it is to instantiate this literate programming environment, which includes a notebook, a docs site and an IDE with all dependencies pre-installed! :point_down:\n{% include video.html url=“https://github.com/machine-learning-apps/demo-videos/raw/master/codespaces-nbdev/e2e_small.mp4” %}"
  },
  {
    "objectID": "posts/codespaces.html#features-of-nbdev",
    "href": "posts/codespaces.html#features-of-nbdev",
    "title": "nbdev + GitHub Codespaces: A New Literate Programming Environment",
    "section": "Features of nbdev",
    "text": "Features of nbdev\nAs discussed in the docs, nbdev provides the following features:\n\nSearchable, hyperlinked documentation, which can be automatically hosted on GitHub Pages for free.\nPython modules, following best practices such as automatically defining __all__ with your exported functions, classes, and variables.\nPip and Conda installers.\nTests defined directly in notebooks which run in parallel. This testing system has been thoroughly tested with GitHub Actions.\nNavigate and edit your code in a standard text editor or IDE, and export any changes automatically back into your notebooks.\n\nSince you are in a notebook, you can also add charts, text, links, images, videos, etc, that are included automatically in the documentation of your library, along with standardized documentation generated automatically from your code. This site is an example of docs generated automatically by nbdev."
  },
  {
    "objectID": "posts/codespaces.html#github-codespaces",
    "href": "posts/codespaces.html#github-codespaces",
    "title": "nbdev + GitHub Codespaces: A New Literate Programming Environment",
    "section": "GitHub Codespaces",
    "text": "GitHub Codespaces\nThanks to Conda and nbdev_template, setting up a development environment with nbdev is far easier than it used to be. However, we realized it could be even easier, thanks to a new GitHub product called Codespaces. Codespaces is a fully functional development environment in your browser, accessible directly from GitHub, that provides the following features:\n\nA full VS Code IDE.\nAn environment that has files from the repository mounted into the environment, along with your GitHub credentials.\nA development environment with dependencies pre-installed, backed by Docker.\nThe ability to serve additional applications on arbitrary ports. For nbdev, we serve a Jupyter notebook server as well as a Jekyll based documentation site.\nA shared file system, which facilitates editing code in one browser tab and rendering the results in another.\n… and more.\n\nCodespaces enables developers to immediately participate in a project without wasting time on DevOps or complicated setup steps. Most importantly, CodeSpaces with nbdev allows developers to quickly get started with creating their own software with literate programming."
  },
  {
    "objectID": "posts/codespaces.html#a-demo-of-nbdev-codespaces",
    "href": "posts/codespaces.html#a-demo-of-nbdev-codespaces",
    "title": "nbdev + GitHub Codespaces: A New Literate Programming Environment",
    "section": "A demo of nbdev + Codespaces",
    "text": "A demo of nbdev + Codespaces\nThis demo uses the project fastai/fastcore, which was built with nbdev, as an example. First, we can navigate to this repo and launch a Codespace:\n{% include video.html url=“https://github.com/machine-learning-apps/demo-videos/raw/master/codespaces-nbdev/1_open.mp4” %}\n\n\n\nIf you are launching a fresh Codespace, it may take several minutes to set up. Once the environment is ready, we can verify that all dependencies we want are installed (in this case fastcore and nbdev):\n{% include video.html url=“https://github.com/machine-learning-apps/demo-videos/raw/master/codespaces-nbdev/2_verify.mp4” %}\n\n\n\nAdditionally, we can serve an arbitrary number of applications on user-specified ports, which we can open through VSCode as shown below:\n{% include video.html url=“https://github.com/machine-learning-apps/demo-videos/raw/master/codespaces-nbdev/3_nb_small.mp4” %}\n\n\n\nIn this case, these applications are a notebook and docs site. Changes to a notebook are reflected immediately in the data docs. Furthermore, we can use the cli command nbdev_build_lib to sync our notebooks with python modules. This functionality is shown below:\n{% include video.html url=“https://github.com/machine-learning-apps/demo-videos/raw/master/codespaces-nbdev/4_reload_small.mp4” %}\n\n\n\nThis is amazing! With a click of a button, I was able to:\n\nLaunch an IDE with all dependencies pre-installed.\nLaunch two additional applications: a Jupyter Notebook server on port 8080 and a docs site on port 4000.\nAutomatically update the docs and modules every time I make a change to a Jupyter notebook.\n\nThis is just the tip of the iceberg. There are additional utilities for writing and executing tests, diffing notebooks, special flags for hiding, showing, and collapsing cells in the generated docs, as well as git hooks for automation. This and more functionality is covered in the nbdev docs."
  },
  {
    "objectID": "posts/codespaces.html#give-it-a-try-for-yourself",
    "href": "posts/codespaces.html#give-it-a-try-for-yourself",
    "title": "nbdev + GitHub Codespaces: A New Literate Programming Environment",
    "section": "Give It A Try For Yourself",
    "text": "Give It A Try For Yourself\nTo try out nbdev yourself, take this tutorial, which will walk you through everything you need to know. The tutorial also shows you how to use a repository template with the configuration files necessary to enable Codespaces with nbdev."
  },
  {
    "objectID": "posts/codespaces.html#you-can-write-blogs-with-notebooks-too",
    "href": "posts/codespaces.html#you-can-write-blogs-with-notebooks-too",
    "title": "nbdev + GitHub Codespaces: A New Literate Programming Environment",
    "section": "You Can Write Blogs With Notebooks, Too!",
    "text": "You Can Write Blogs With Notebooks, Too!\nThis blog post was written in fastpages which is also built on nbdev! We recommend fastpages if you want an easy way to blog with Jupyter notebooks."
  },
  {
    "objectID": "posts/codespaces.html#additional-resources",
    "href": "posts/codespaces.html#additional-resources",
    "title": "nbdev + GitHub Codespaces: A New Literate Programming Environment",
    "section": "Additional Resources",
    "text": "Additional Resources\n\nThe GitHub Codepaces site.\nThe official docs for Codespaces.\nThe nbdev docs.\nThe nbdev GitHub repo.\nfastpages: The project used to write this blog.\nThe GitHub repo fastai/fastcore, which is what we used in this blog post as an example."
  },
  {
    "objectID": "posts/actions.html",
    "href": "posts/actions.html",
    "title": "GitHub Actions: Providing Data Scientists With New Superpowers",
    "section": "",
    "text": "Hi, I’m Hamel Husain. I’m a machine learning engineer at GitHub. Recently, GitHub released a new product called GitHub Actions, which has mostly flown under the radar in the machine learning and data science community as just another continuous integration tool.\nRecently, I’ve been able to use GitHub Actions to build some very unique tools for Data Scientists, which I want to share with you today. Most importantly, I hope to get you excited about GitHub Actions, and the promise it has for giving you new superpowers as a Data Scientist. Here are two projects I recently built with Actions that show off its potential:\n\n\nfastpages is an automated, open-source blogging platform with enhanced support for Jupyter notebooks. You save your notebooks, markdown, or Word docs into a directory on GitHub, and they automatically become blog posts. Read the announcement below:\n\n{% twitter https://twitter.com/jeremyphoward/status/1232059428238581760?s=20 %}\n\n\n\n\nWouldn’t it be cool if you could invoke a chatbot natively on GitHub to test your machine learning models on the infrastructure of your choice (GPUs), log all the results, and give you a rich report back in a pull request so that everyone could see the results? You can with GitHub Actions!\nConsider the below annotated screenshot of this Pull Request:\n \nA more in-depth explanation about the above project can be viewed in this video:\n{% include youtube.html content=“https://youtu.be/Ll50l3fsoYs” %}\nUsing GitHub Actions for machine learning workflows is starting to catch on. Julien Chaumond, CTO of Hugging Face, says:\n\nGitHub Actions are great because they let us do CI on GPUs (as most of our users use the library on GPUs not on CPUs), on our own infra! 1\n\nAdditionally, you can host a GitHub Action for other people so others can use parts of your workflow without having to re-create your steps. I provide examples of this below."
  },
  {
    "objectID": "posts/actions.html#what-are-github-actions",
    "href": "posts/actions.html#what-are-github-actions",
    "title": "GitHub Actions: Providing Data Scientists With New Superpowers",
    "section": "What Are GitHub Actions?",
    "text": "What Are GitHub Actions?\nGitHub Actions allow you to run arbitrary code in response to events. Events are activities that happen on GitHub such as:\n\nOpening a pull request\nMaking an issue comment\nLabeling an issue\nCreating a new branch\n… and many more\n\nWhen an event is created, the GitHub Actions context is hydrated with a payload containing metadata for that event. Below is an example of a payload that is received when an issue is created:\n{% raw %}\n{\n  \"action\": \"created\",\n  \"issue\": {\n    \"id\": 444500041,\n    \"number\": 1,\n    \"title\": \"Spelling error in the README file\",\n    \"user\": {\n      \"login\": \"Codertocat\",\n      \"type\": \"User\",\n    },\n    \"labels\": [\n      {\n        \"id\": 1362934389,\n        \"node_id\": \"MDU6TGFiZWwxMzYyOTM0Mzg5\",\n        \"name\": \"bug\",\n        }\n     ],\n     \"body\": \"It looks like you accidently spelled 'commit' with two 't's.\"\n}\nThis functionality allows you to respond to various events on GitHub in an automated way. In addition to this payload, GitHub Actions also provide a plethora of variables and environment variables that afford easy to access metadata such as the username and the owner of the repo. Additionally, other people can package useful functionality into an Action that other people can inherit. For example, consider the below Action that helps you publish python packages to PyPi:\nThe Usage section describes how this Action can be used:\n- name: Publish a Python distribution to PyPI\n  uses: pypa/gh-action-pypi-publish@master\n  with:\n    user: __token__\n    password: ${{ secrets.pypi_password }}\nThis Action expects two inputs: user and a password. You will notice that the password is referencing a variable called secrets, which is a variable that contains an encrypted secret that you can upload to your GitHub repository. There are thousands of Actions (that are free) for a wide variety of tasks that can be discovered on the GitHub Marketplace. The ability to inherit ready-made Actions in your workflow allows you to accomplish complex tasks without implementing all of the logic yourself. Some useful Actions for those getting started are:\n\nactions/checkout: Allows you to quickly clone the contents of your repository into your environment, which you often want to do. This does a number of other things such as automatically mount your repository’s files into downstream Docker containers.\nmxschmitt/action-tmate: Proivdes a way to debug Actions interactively. This uses port forwarding to give you a terminal in the browser that is connected to your Actions runner. Be careful not to expose sensitive information if you use this.\nactions/github-script: Gives you a pre-authenticated ocotokit.js client that allows you to interact with the GitHub API to accomplish almost any task on GitHub automatically. Only these endpoints are supported (for example, the secrets endpoint is not in that list).\n\nIn addition to the aforementioned Actions, it is helpful to go peruse the official GitHub Actions docs before diving in."
  },
  {
    "objectID": "posts/actions.html#example-a-fastpages-action-workflow",
    "href": "posts/actions.html#example-a-fastpages-action-workflow",
    "title": "GitHub Actions: Providing Data Scientists With New Superpowers",
    "section": "Example: A fastpages Action Workflow",
    "text": "Example: A fastpages Action Workflow\nThe best to way familiarize yourself with Actions is by studying examples. Let’s take a look at the Action workflow that automates the build of fastpages (the platform used to write this blog post).\n\nPart 1: Define Workflow Triggers\nFirst, we define triggers in ci.yaml. Like all Actions workflows, this is a YAML file located in the .github/workflows directory of the GitHub repo.\nThe top of this YAML file looks like this:\nname: CI\non:\n  push:\n    branches:\n      - master\n  pull_request: \nThis means that this workflow is triggered on either a push or pull request event. Furthermore, push events are filtered such that only pushes to the master branch will trigger the workflow, whereas all pull requests will trigger this workflow. It is important to note that pull requests opened from forks will have read-only access to the base repository and cannot access any secrets for security reasons. The reason for defining the workflow in this way is we wanted to trigger the same workflow to test pull requests as well as build and deploy the website when a PR is merged into master. This will be clarified as we step through the rest of the YAML file.\n\n\nPart 2: Define Jobs\nNext, we define jobs (there is only one in this workflow). Per the docs:\n\nA workflow run is made up of one or more jobs. Jobs run in parallel by default.\n\njobs:     \n  build-site:\n    if: ( github.event.commits[0].message != 'Initial commit' ) || github.run_number > 1\n    runs-on: ubuntu-latest\n    steps:\nThe keyword build-site is the name of your job and you can name it whatever you want. In this case, we have a conditional if statement that dictates if this job should be run or not. We are trying to ensure that this workflow does not run when the first commit to a repo is made with the message ‘Initial commit’. The first variable in the if statement, github.event, contains a json payload of the event that triggered this workflow. When developing workflows, it is helpful to print this variable in order to inspect its structure, which you can accomplish with the following YAML:\n    - name: see payload\n      run: |\n        echo \"PAYLOAD:\\n${PAYLOAD}\\n\"\n      env:\n        PAYLOAD: ${{ toJSON(github.event) }}\nNote: the above step is only for debugging and is not currently in the workflow.\ntoJson is a handy function that returns a pretty-printed JSON representation of the variable. The output is printed directly in the logs contained in the Actions tab of your repo. In this example, printing the payload for a push event will look like this (truncated for brevity):\n{\n  \"ref\": \"refs/tags/simple-tag\",\n  \"before\": \"6113728f27ae8c7b1a77c8d03f9ed6e0adf246\",\n  \"created\": false,\n  \"deleted\": true,\n  \"forced\": false,\n  \"base_ref\": null,\n  \"commits\": [\n    {\n      \"message\": \"updated README.md\",\n      \"author\": \"hamelsmu\"\n    },\n  ],\n  \"head_commit\": null,\n}\nTherefore, the variable github.event.commits[0].message will retrieve the first commit message in the array of commits. Since we are looking for situations where there is only one commit, this logic suffices. The second variable in the if statement, github.run_number is a special variable in Actions which:\n\n[is a] unique number for each run of a particular workflow in a repository. This number begins at 1 for the workflow’s first run, and increments with each new run. This number does not change if you re-run the workflow run.\n\nTherefore, the if statement introduced above:\nif: ( github.event.commits[0].message != 'Initial commit' ) || github.run_number > 1\nAllows the workflow to run when the commit message is “Initial commit” as long as it is not the first commit. ( || is a logical or operator).\nFinally, the line runs-on: ubuntu-latest specifies the host operating system that your workflows will run in.\n\n\nPart 3: Define Steps\nPer the docs:\n\nA job contains a sequence of tasks called steps. Steps can run commands, run setup tasks, or run an Action in your repository, a public repository, or an Action published in a Docker registry. Not all steps run Actions, but all Actions run as a step. Each step runs in its own process in the runner environment and has access to the workspace and filesystem. Because steps run in their own process, changes to environment variables are not preserved between steps. GitHub provides built-in steps to set up and complete a job.\n\nBelow are the first two steps in our workflow:\n   - name: Copy Repository Contents\n     uses: actions/checkout@master\n     with:\n       persist-credentials: false\n\n   - name: convert notebooks and word docs to posts\n     uses: ./_action_files\nThe first step creates a copy of your repository in the Actions file system, with the help of the utility action/checkout. This utility only fetches the last commit by default and saves files into a directory (whose path is stored in the environment variable GITHUB_WORKSPACE that is accessible by subsequent steps in your job. The second step runs the fastai/fastpages Action, which converts notebooks and word documents to blog posts automatically. In this case, the syntax:\nuses: ./_action_files\nis a special case where the pre-made GitHub Action we want to run happens to be defined in the same repo that runs this workflow. This syntax allows us to test changes to this pre-made Action when evaluating PRs by referencing the directory in the current repository that defines that pre-made Action. Note: Building pre-made Actions is beyond the scope of this tutorial.\nThe next three steps in our workflow are defined below:\n    - name: setup directories for Jekyll build\n      run: |\n        rm -rf _site\n        sudo chmod -R 777 .\n\n    - name: Jekyll build\n      uses: docker://fastai/fastpages-jekyll\n      with:\n        args: bash -c \"gem install bundler && jekyll build -V\"\n      env:\n        JEKYLL_ENV: 'production'\n  \n    - name: copy CNAME file into _site if CNAME exists\n      run: |\n        sudo chmod -R 777 _site/\n        cp CNAME _site/ 2>/dev/null || :\nThe step named setup directories for Jekyll build executes shell commands that remove the _site folder in order to get rid of stale files related to the page we want to build, as well as grant permissions to all the files in our repo to subsequent steps.\nThe step named Jekyll build executes a docker container hosted by the Jekyll community on Dockerhub called jekyll/jekyll. For those not familiar with Docker, see this tutorial. The name of this container is called fastai/fastpages-jekyll because I’m adding some additional dependencies to jekyll/jekyll and hosting those on my DockerHub account for faster build times2. The args parameter allows you to execute arbitrary commands with the Docker container by overriding the CMD instruction in the Dockerfile. We use this Docker container hosted on Dockerhub so we don’t have to deal with installing and configuring all of the complicated dependencies for Jekyll. The files from our repo are already available in the Actions runtime due to the first step in this workflow, and are mounted into this Docker container automatically for us. In this case, we are running the command jekyll build, which builds our website and places relevant assets them into the _site folder. For more information about Jekyll, read the official docs. Finally, the env parameter allows me to pass an environment variable into the Docker container.\nThe final command above copies a CNAME file into the _site folder, which we need for the custom domain https://fastpages.fast.ai. Setting up custom domains are outside the scope of this article.\nThe final step in our workflow is defined below:\n  - name: Deploy\n    if: github.event_name == 'push'\n    uses: peaceiris/actions-gh-pages@v3\n    with:\n      deploy_key: ${{ secrets.SSH_DEPLOY_KEY }}\n      publish_dir: ./_site\n{% endraw %}\nThe statement\nif: github.event_name == 'push'\nuses the variable github.event_name to ensure this step only runs when a push event ( in this case only pushes to the master branch trigger this workflow) occur.\nThis step deploys the fastpages website by copying the contents of the _site folder to the root of the gh-pages branch, which GitHub Pages uses for hosting. This step uses the peaceiris/actions-gh-pages Action, pinned at version 3. Their README describes various options and inputs for this Action."
  },
  {
    "objectID": "posts/actions.html#related-materials",
    "href": "posts/actions.html#related-materials",
    "title": "GitHub Actions: Providing Data Scientists With New Superpowers",
    "section": "Related Materials",
    "text": "Related Materials\n\nGitHub Actions official documentation\nHello world Docker Action: A template to demonstrate how to build a Docker Action for other people to use.\nAwesome Actions: A curated list of interesting GitHub Actions by topic.\nA tutorial on Docker for Data Scientists.\n\n\nGetting In Touch\nPlease feel free to get in touch with us on Twitter:\n\nHamel Husain @HamelHusain\nJeremy Howard @jeremyphoward\n\n\n\nFootnotes"
  },
  {
    "objectID": "posts/fastcore.html",
    "href": "posts/fastcore.html",
    "title": "fastcore: An Underrated Python Library",
    "section": "",
    "text": "screenshot with code"
  },
  {
    "objectID": "posts/fastcore.html#making-kwargs-transparent",
    "href": "posts/fastcore.html#making-kwargs-transparent",
    "title": "fastcore: An Underrated Python Library",
    "section": "Making **kwargs transparent",
    "text": "Making **kwargs transparent\nWhenever I see a function that has the argument **kwargs, I cringe a little. This is because it means the API is obfuscated and I have to read the source code to figure out what valid parameters might be. Consider the below example:\n\ndef baz(a, b=2, c=3, d=4): return a + b + c\n\ndef foo(c, a, **kwargs):\n    return c + baz(a, **kwargs)\n\ninspect.signature(foo)\n\n<Signature (c, a, **kwargs)>\n\n\nWithout reading the source code, it might be hard for me to know that foo also accepts and additional parameters b and d. We can fix this with delegates:\n\ndef baz(a, b=2, c=3, d=4): return a + b + c\n\n@delegates(baz) # this decorator will pass down keyword arguments from baz\ndef foo(c, a, **kwargs):\n    return c + baz(a, **kwargs)\n\ninspect.signature(foo)\n\n<Signature (c, a, b=2, d=4)>\n\n\nYou can customize the behavior of this decorator. For example, you can have your cake and eat it too by passing down your arguments and also keeping **kwargs:\n\n@delegates(baz, keep=True)\ndef foo(c, a, **kwargs):\n    return c + baz(a, **kwargs)\n\ninspect.signature(foo)\n\n<Signature (c, a, b=2, d=4, **kwargs)>\n\n\nYou can also exclude arguments. For example, we exclude argument d from delegation:\n\ndef basefoo(a, b=2, c=3, d=4): pass\n\n@delegates(basefoo, but=['d']) # exclude `d`\ndef foo(c, a, **kwargs): pass\n\ninspect.signature(foo)\n\n<Signature (c, a, b=2)>\n\n\nYou can also delegate between classes:\n\nclass BaseFoo:\n    def __init__(self, e, c=2): pass\n\n@delegates()# since no argument was passsed here we delegate to the superclass\nclass Foo(BaseFoo):\n    def __init__(self, a, b=1, **kwargs): super().__init__(**kwargs)\n        \ninspect.signature(Foo)\n\n<Signature (a, b=1, c=2)>\n\n\nFor more information, read the docs on delegates."
  },
  {
    "objectID": "posts/fastcore.html#avoid-boilerplate-when-setting-instance-attributes",
    "href": "posts/fastcore.html#avoid-boilerplate-when-setting-instance-attributes",
    "title": "fastcore: An Underrated Python Library",
    "section": "Avoid boilerplate when setting instance attributes",
    "text": "Avoid boilerplate when setting instance attributes\nHave you ever wondered if it was possible to avoid the boilerplate involved with setting attributes in __init__?\n\nclass Test:\n    def __init__(self, a, b ,c): \n        self.a, self.b, self.c = a, b, c\n\nOuch! That was painful. Look at all the repeated variable names. Do I really have to repeat myself like this when defining a class? Not Anymore! Checkout store_attr:\n\nclass Test:\n    def __init__(self, a, b, c): \n        store_attr()\n        \nt = Test(5,4,3)\nassert t.b == 4\n\nYou can also exclude certain attributes:\n\nclass Test:\n    def __init__(self, a, b, c): \n        store_attr(but=['c'])\n    \nt = Test(5,4,3)\nassert t.b == 4\nassert not hasattr(t, 'c')\n\nThere are many more ways of customizing and using store_attr than I highlighted here. Check out the docs for more detail.\nP.S. you might be thinking that Python dataclasses also allow you to avoid this boilerplate. While true in some cases, store_attr is more flexible.{% fn 1 %}\n{{ “For example, store_attr does not rely on inheritance, which means you won’t get stuck using multiple inheritance when using this with your own classes. Also, unlike dataclasses, store_attr does not require python 3.7 or higher. Furthermore, you can use store_attr anytime in the object lifecycle, and in any location in your class to customize the behavior of how and when variables are stored.” | fndetail: 1 }}"
  },
  {
    "objectID": "posts/fastcore.html#avoiding-subclassing-boilerplate",
    "href": "posts/fastcore.html#avoiding-subclassing-boilerplate",
    "title": "fastcore: An Underrated Python Library",
    "section": "Avoiding subclassing boilerplate",
    "text": "Avoiding subclassing boilerplate\nOne thing I hate about python is the __super__().__init__() boilerplate associated with subclassing. For example:\n\nclass ParentClass:\n    def __init__(self): self.some_attr = 'hello'\n        \nclass ChildClass(ParentClass):\n    def __init__(self):\n        super().__init__()\n\ncc = ChildClass()\nassert cc.some_attr == 'hello' # only accessible b/c you used super\n\nWe can avoid this boilerplate by using the metaclass PrePostInitMeta. We define a new class called NewParent that is a wrapper around the ParentClass:\n\nclass NewParent(ParentClass, metaclass=PrePostInitMeta):\n    def __pre_init__(self, *args, **kwargs): super().__init__()\n\nclass ChildClass(NewParent):\n    def __init__(self):pass\n    \nsc = ChildClass()\nassert sc.some_attr == 'hello'"
  },
  {
    "objectID": "posts/fastcore.html#type-dispatch",
    "href": "posts/fastcore.html#type-dispatch",
    "title": "fastcore: An Underrated Python Library",
    "section": "Type Dispatch",
    "text": "Type Dispatch\nType dispatch, or Multiple dispatch, allows you to change the way a function behaves based upon the input types it receives. This is a prominent feature in some programming languages like Julia. For example, this is a conceptual example of how multiple dispatch works in Julia, returning different values depending on the input types of x and y:\ncollide_with(x::Asteroid, y::Asteroid) = ... \n# deal with asteroid hitting asteroid\n\ncollide_with(x::Asteroid, y::Spaceship) = ... \n# deal with asteroid hitting spaceship\n\ncollide_with(x::Spaceship, y::Asteroid) = ... \n# deal with spaceship hitting asteroid\n\ncollide_with(x::Spaceship, y::Spaceship) = ... \n# deal with spaceship hitting spaceship\nType dispatch can be especially useful in data science, where you might allow different input types (i.e. Numpy arrays and Pandas dataframes) to a function that processes data. Type dispatch allows you to have a common API for functions that do similar tasks.\nUnfortunately, Python does not support this out-of-the box. Fortunately, there is the @typedispatch decorator to the rescue. This decorator relies upon type hints in order to route inputs the correct version of the function:\n\n@typedispatch\ndef f(x:str, y:str): return f'{x}{y}'\n\n@typedispatch\ndef f(x:np.ndarray): return x.sum()\n\n@typedispatch\ndef f(x:int, y:int): return x+y\n\nBelow is a demonstration of type dispatch at work for the function f:\n\nf('Hello ', 'World!')\n\n'Hello World!'\n\n\n\nf(2,3)\n\n5\n\n\n\nf(np.array([5,5,5,5]))\n\n20\n\n\nThere are limitations of this feature, as well as other ways of using this functionality that you can read about here. In the process of learning about typed dispatch, I also found a python library called multipledispatch made by Mathhew Rocklin (the creator of Dask).\nAfter using this feature, I am now motivated to learn languages like Julia to discover what other paradigms I might be missing."
  },
  {
    "objectID": "posts/fastcore.html#a-better-version-of-functools.partial",
    "href": "posts/fastcore.html#a-better-version-of-functools.partial",
    "title": "fastcore: An Underrated Python Library",
    "section": "A better version of functools.partial",
    "text": "A better version of functools.partial\nfunctools.partial is a great utility that creates functions from other functions that lets you set default values. Lets take this function for example that filters a list to only contain values >= val:\n\ntest_input = [1,2,3,4,5,6]\ndef f(arr, val): \n    \"Filter a list to remove any values that are less than val.\"\n    return [x for x in arr if x >= val]\n\nf(test_input, 3)\n\n[3, 4, 5, 6]\n\n\nYou can create a new function out of this function using partial that sets the default value to 5:\n\nfilter5 = partial(f, val=5)\nfilter5(test_input)\n\n[5, 6]\n\n\nOne problem with partial is that it removes the original docstring and replaces it with a generic docstring:\n\nfilter5.__doc__\n\n'partial(func, *args, **keywords) - new function with partial application\\n    of the given arguments and keywords.\\n'\n\n\nfastcore.utils.partialler fixes this, and makes sure the docstring is retained such that the new API is transparent:\n\nfilter5 = partialler(f, val=5)\nfilter5.__doc__\n\n'Filter a list to remove any values that are less than val.'"
  },
  {
    "objectID": "posts/fastcore.html#composition-of-functions",
    "href": "posts/fastcore.html#composition-of-functions",
    "title": "fastcore: An Underrated Python Library",
    "section": "Composition of functions",
    "text": "Composition of functions\nA technique that is pervasive in functional programming languages is function composition, whereby you chain a bunch of functions together to achieve some kind of result. This is especially useful when applying various data transformations. Consider a toy example where I have three functions: (1) Removes elements of a list less than 5 (from the prior section) (2) adds 2 to each number (3) sums all the numbers:\n\ndef add(arr, val): return [x + val for x in arr]\ndef arrsum(arr): return sum(arr)\n\n# See the previous section on partialler\nadd2 = partialler(add, val=2)\n\ntransform = compose(filter5, add2, arrsum)\ntransform([1,2,3,4,5,6])\n\n15\n\n\nBut why is this useful? You might me thinking, I can accomplish the same thing with:\narrsum(add2(filter5([1,2,3,4,5,6])))\nYou are not wrong! However, composition gives you a convenient interface in case you want to do something like the following:\n\ndef fit(x, transforms:list):\n    \"fit a model after performing transformations\"\n    x = compose(*transforms)(x)\n    y = [np.mean(x)] * len(x) # its a dumb model.  Don't judge me\n    return y\n\n# filters out elements < 5, adds 2, then predicts the mean\nfit(x=[1,2,3,4,5,6], transforms=[filter5, add2])\n\n[7.5, 7.5]\n\n\nFor more information about compose, read the docs."
  },
  {
    "objectID": "posts/fastcore.html#a-more-useful-repr",
    "href": "posts/fastcore.html#a-more-useful-repr",
    "title": "fastcore: An Underrated Python Library",
    "section": "A more useful repr",
    "text": "A more useful repr\nIn python, __repr__ helps you get information about an object for logging and debugging. Below is what you get by default when you define a new class. (Note: we are using store_attr, which was discussed earlier).\n\nclass Test:\n    def __init__(self, a, b=2, c=3): store_attr() # `store_attr` was discussed previously\n    \nTest(1)\n\n<__main__.Test at 0x7ffcd766cee0>\n\n\nWe can use basic_repr to quickly give us a more sensible default:\n\nclass Test:\n    def __init__(self, a, b=2, c=3): store_attr() \n    __repr__ = basic_repr('a,b,c')\n    \nTest(2)\n\nTest(a=2, b=2, c=3)"
  },
  {
    "objectID": "posts/fastcore.html#monkey-patching-with-a-decorator",
    "href": "posts/fastcore.html#monkey-patching-with-a-decorator",
    "title": "fastcore: An Underrated Python Library",
    "section": "Monkey Patching With A Decorator",
    "text": "Monkey Patching With A Decorator\nIt can be convenient to monkey patch with a decorator, which is especially helpful when you want to patch an external library you are importing. We can use the decorator @patch from fastcore.foundation along with type hints like so:\n\nclass MyClass(int): pass  \n\n@patch\ndef func(self:MyClass, a): return self+a\n\nmc = MyClass(3)\n\nNow, MyClass has an additional method named func:\n\nmc.func(10)\n\n13\n\n\nStill not convinced? I’ll show you another example of this kind of patching in the next section."
  },
  {
    "objectID": "posts/fastcore.html#a-better-pathlib.path",
    "href": "posts/fastcore.html#a-better-pathlib.path",
    "title": "fastcore: An Underrated Python Library",
    "section": "A better pathlib.Path",
    "text": "A better pathlib.Path\nWhen you see these extensions to pathlib.path you won’t ever use vanilla pathlib again! A number of additional methods have been added to pathlib, such as:\n\nPath.readlines: same as with open('somefile', 'r') as f: f.readlines()\nPath.read: same as with open('somefile', 'r') as f: f.read()\nPath.save: saves file as pickle\nPath.load: loads pickle file\nPath.ls: shows the contents of the path as a list.\netc.\n\nRead more about this here. Here is a demonstration of ls:\n\nfrom fastcore.utils import *\nfrom pathlib import Path\np = Path('.')\np.ls() # you don't get this with vanilla Pathlib.Path!!\n\n(#7) [Path('2020-09-01-fastcore.ipynb'),Path('README.md'),Path('fastcore_imgs'),Path('2020-02-20-test.ipynb'),Path('.ipynb_checkpoints'),Path('2020-02-21-introducing-fastpages.ipynb'),Path('my_icons')]\n\n\nWait! What’s going on here? We just imported pathlib.Path - why are we getting this new functionality? Thats because we imported the fastcore.utils module, which patches this module via the @patch decorator discussed earlier. Just to drive the point home on why the @patch decorator is useful, I’ll go ahead and add another method to Path right now:\n\n@patch\ndef fun(self:Path): return \"This is fun!\"\n\np.fun()\n\n'This is fun!'\n\n\nThat is magical, right? I know! That’s why I’m writing about it!"
  },
  {
    "objectID": "posts/fastcore.html#an-even-more-concise-way-to-create-lambdas",
    "href": "posts/fastcore.html#an-even-more-concise-way-to-create-lambdas",
    "title": "fastcore: An Underrated Python Library",
    "section": "An Even More Concise Way To Create Lambdas",
    "text": "An Even More Concise Way To Create Lambdas\nSelf, with an uppercase S, is an even more concise way to create lambdas that are calling methods on an object. For example, let’s create a lambda for taking the sum of a Numpy array:\n\narr=np.array([5,4,3,2,1])\nf = lambda a: a.sum()\nassert f(arr) == 15\n\nYou can use Self in the same way:\n\nf = Self.sum()\nassert f(arr) == 15\n\nLet’s create a lambda that does a groupby and max of a Pandas dataframe:\n\nimport pandas as pd\ndf=pd.DataFrame({'Some Column': ['a', 'a', 'b', 'b', ], \n                 'Another Column': [5, 7, 50, 70]})\n\nf = Self.groupby('Some Column').mean()\nf(df)\n\n\n\n\n\n  \n    \n      \n      Another Column\n    \n    \n      Some Column\n      \n    \n  \n  \n    \n      a\n      6\n    \n    \n      b\n      60\n    \n  \n\n\n\n\nRead more about Self in the docs."
  },
  {
    "objectID": "posts/fastcore.html#notebook-functions",
    "href": "posts/fastcore.html#notebook-functions",
    "title": "fastcore: An Underrated Python Library",
    "section": "Notebook Functions",
    "text": "Notebook Functions\nThese are simple but handy, and allow you to know whether or not code is executing in a Jupyter Notebook, Colab, or an Ipython Shell:\n\nfrom fastcore.imports import in_notebook, in_colab, in_ipython\nin_notebook(), in_colab(), in_ipython()\n\n(True, False, True)\n\n\nThis is useful if you are displaying certain types of visualizations, progress bars or animations in your code that you may want to modify or toggle depending on the environment."
  },
  {
    "objectID": "posts/fastcore.html#a-drop-in-replacement-for-list",
    "href": "posts/fastcore.html#a-drop-in-replacement-for-list",
    "title": "fastcore: An Underrated Python Library",
    "section": "A Drop-In Replacement For List",
    "text": "A Drop-In Replacement For List\nYou might be pretty happy with Python’s list. This is one of those situations that you don’t know you needed a better list until someone showed one to you. Enter L, a list like object with many extra goodies.\nThe best way I can describe L is to pretend that list and numpy had a pretty baby:\ndefine a list (check out the nice __repr__ that shows the length of the list!)\n\nL(1,2,3)\n\n(#3) [1,2,3]\n\n\nShuffle a list:\n\np = L.range(20).shuffle()\np\n\n(#20) [8,7,5,12,14,16,2,15,19,6...]\n\n\nIndex into a list:\n\np[2,4,6]\n\n(#3) [5,14,2]\n\n\nL has sensible defaults, for example appending an element to a list:\n\n1 + L(2,3,4)\n\n(#4) [1,2,3,4]\n\n\nThere is much more L has to offer. Read the docs to learn more."
  },
  {
    "objectID": "posts/fastcore.html#utilities",
    "href": "posts/fastcore.html#utilities",
    "title": "fastcore: An Underrated Python Library",
    "section": "Utilities",
    "text": "Utilities\nThe Basics section contain many shortcuts to perform common tasks or provide an additional interface to what standard python provides.\n\nmk_class: quickly add a bunch of attributes to a class\nwrap_class: add new methods to a class with a simple decorator\ngroupby: similar to Scala’s groupby\nmerge: merge dicts\nfasttuple: a tuple on steroids\nInfinite Lists: useful for padding and testing\nchunked: for batching and organizing stuff"
  },
  {
    "objectID": "posts/fastcore.html#multiprocessing",
    "href": "posts/fastcore.html#multiprocessing",
    "title": "fastcore: An Underrated Python Library",
    "section": "Multiprocessing",
    "text": "Multiprocessing\nThe Multiprocessing section extends python’s multiprocessing library by offering features like:\n\nprogress bars\nability to pause to mitigate race conditions with external services\nprocessing things in batches on each worker, ex: if you have a vectorized operation to perform in chunks"
  },
  {
    "objectID": "posts/fastcore.html#functional-programming",
    "href": "posts/fastcore.html#functional-programming",
    "title": "fastcore: An Underrated Python Library",
    "section": "Functional Programming",
    "text": "Functional Programming\nThe functional programming section is my favorite part of this library.\n\nmaps: a map that also composes functions\nmapped: A more robust map\nusing_attr: compose a function that operates on an attribute"
  },
  {
    "objectID": "posts/fastcore.html#transforms",
    "href": "posts/fastcore.html#transforms",
    "title": "fastcore: An Underrated Python Library",
    "section": "Transforms",
    "text": "Transforms\nTransforms is a collection of utilities for creating data transformations and associated pipelines. These transformation utilities build upon many of the building blocks discussed in this blog post."
  },
  {
    "objectID": "posts/fastcore.html#further-reading",
    "href": "posts/fastcore.html#further-reading",
    "title": "fastcore: An Underrated Python Library",
    "section": "Further Reading",
    "text": "Further Reading\nIt should be noted that you should read the main page of the docs first, followed by the section on tests to fully understand the documentation.\n\nThe fastcore documentation site.\nThe fastcore GitHub repo.\nBlog post on delegation."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbpages",
    "section": "",
    "text": "fastpages\n\n\njupyter\n\n\n\n\nAn easy to use blogging platform with extra features for Jupyter Notebooks\n\n\n\n\n\n\nMay 27, 2022\n\n\nHamel Husain, Jeremy Howard\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nnbdev\n\n\nfastlinkcheck\n\n\n\n\nSay goodbye broken links on your static sites. Platform independent, fast, and built in python.\n\n\n\n\n\n\nNov 17, 2020\n\n\nJeremy Howard, Hamel Husain\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nfastcore\n\n\nfastai\n\n\n\n\nA unique python library that extends the python programming language and provides utilities that enhance productivity.\n\n\n\n\n\n\nOct 1, 2020\n\n\nHamel Husain\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nactions\n\n\nmarkdown\n\n\n\n\nA Tutorial on GitHub Actions For Data Scientists\n\n\n\n\n\n\nJul 1, 2020\n\n\nHamel Husain & Jeremy Howard\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\ncodespaces\n\n\nnbdev\n\n\n\n\nHow a new GitHub feature makes literate programming easier than ever before.\n\n\n\n\n\n\nMay 5, 2020\n\n\nHamel Husain, Jeremy Howard\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\njupyter\n\n\n\n\nA tutorial of fastpages for Jupyter notebooks.\n\n\n\n\n\n\nFeb 20, 2020\n\n\nHamel Husain\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nmarkdown\n\n\n\n\nA minimal example of using markdown with nbpages.\n\n\n\n\n\n\nFeb 2, 2020\n\n\nHamel Husain\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]